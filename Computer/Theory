# Computer

* Theory : 7 chapters

- Data representation
    -> Built in Data Type: 

        > The data type that the programming language has already defined itself and the programmer can use these data types without declaring is built-in data types.
        > They are also called primary or primitive data types.
        > examples of these data types are: STRING, INTEGER, BOOLEAN, DATE, REAL, FLOAT,... etc.

    -> User Defined Data type : 

        Those data types that are defined by the user by deriving from the existing data type is known as user defined data type.
        examples of these data types are: array, class, module etc.
        
        1) Non-Compsite Data type:  The data type that are defined without the reference to other data type is known as non-composite data type. 
                                    It can also be built-in data types.
            i) Eneumerated Data type: Enumerated data type contains no references to other data types when it is defined. Enumerated data type has fixed values.
                > Structure for enumerated data type:
                    TYPE <identifier> = (value1, value2, value3, ... and so on) 
                > example of enumerated data type: 
                    TYPE Tmonth = (January, February, March, April, May, June, July, August, September, October, November, December)
                    Defining the months in pseudocode:
                    
                    DECLARE Thismonth : Tmonth
                    DECLARE Nextmonth : Tmonth
                    Thismonth <- January
                    Nextmonth <- Thismonth + 1

            ii) Pointer Data type: The Pointer data type is used to refrence a memory location.
                > Structure of pointer data type:
                    Type <identifier> : ^<type name>
                    when the type is mentioned we have to give a caret (^) symbol to identify as a pointer.
                > example of pointer data type :
                    Type Tmonthpointer = ^Tmonth
                    DECLARE monthpointer : Tmonthpointer
                    monthpointer <- ^thismonth                    
                    
        2) Composite Data type : The data type that refers to other data type when defined is known as composite data type.

            i) Record data type : Records are the composite data types that are iclusive of many several related items that may be of different data type.
                                Record data type can be built-in data type or it can also be user defined.
                    
                > Structure of record data type  : 
                    TYPE
                    <Typename>
                        DECLARE <item1 identifier> : <Data type>
                        DECLARE <item2 identifier> : <Data type>
                        DECLARE <item3 identifier> : <Data type>

                    END TYPE

                example of record data type:
                    TYPE 
                    Student_information 
                        Name : STRING
                        Roll Number : INTEGER
                        Height : REAL
                        Gender : BOOLEAN
                    ENDTYPE 

             
            ii) Set data type : Sets are the data types that has the collection of non-repeating items that can be performed defined mathematical calculations.
                                Sets are useful because it has no duplicate values. 
                                So if there is a one dimentional array and if we have to check for duplicate values then we can convert the array into set and after processing we can again convert it back to original.
                > Structure of set data type : 
                    TYPE <SET identifier> = SET of <BASETYPE>
                > Defining the SET :
                    DEFINE <identifier> = (value1, value2, value3, ... and so on) : <SET identifier>

                example of SET data type :
                    TYPE Sletter = set of CHAR
                    DEFINE vowels = ("a","e","i","o","u") : letters

                Operations that can be performed in set:
                    • Checking if a value exists in a set
                    • Adding a new data value
                    • Removing an existing data value
                    • Adding one set to another set

            iii) Class data type : The composite data type that includes variables of given data types and methods.
                                   It is used for object oriented programming. There are likely to be number of built-in classes but if the programmer wants to utilize the classes, then they can create user defined classes. 

    -> File Organization and access:

        1) File Organization : 

            i) Serial file organization : The oranization where the files are stored physically one after another in the order they were added is known as serial file oranization.

            ii) Sequential file orgnization 
            iii) Random file organization 

        2) file access
            i) Sequential access
            ii) Direct access

    -> Hashing Algorithm
    



- Communication and Internet technologies
- Hardware and virtual machines
- logic circuits and Boolean algebra
- System software
- Security
- Artificial Intellegence (AI)